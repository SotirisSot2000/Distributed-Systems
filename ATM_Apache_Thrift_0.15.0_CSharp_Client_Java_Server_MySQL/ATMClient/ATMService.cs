/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace ATMClient
{
  public partial class ATMService
  {
    public interface IAsync
    {
      global::System.Threading.Tasks.Task<double> balance(string customer_id, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<double> deposit(string customer_id, double price, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<double> withdraw(string customer_id, double price, CancellationToken cancellationToken = default);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<double> balance(string customer_id, CancellationToken cancellationToken = default)
      {
        await send_balance(customer_id, cancellationToken);
        return await recv_balance(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_balance(string customer_id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("balance", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp0 = new InternalStructs.balance_args() {
          Customer_id = customer_id,
        };
        
        await tmp0.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<double> recv_balance(CancellationToken cancellationToken = default)
      {
        
        var tmp1 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1.Type == TMessageType.Exception)
        {
          var tmp2 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2;
        }

        var tmp3 = new InternalStructs.balance_result();
        await tmp3.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3.__isset.success)
        {
          return tmp3.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "balance failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<double> deposit(string customer_id, double price, CancellationToken cancellationToken = default)
      {
        await send_deposit(customer_id, price, cancellationToken);
        return await recv_deposit(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_deposit(string customer_id, double price, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("deposit", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp4 = new InternalStructs.deposit_args() {
          Customer_id = customer_id,
          Price = price,
        };
        
        await tmp4.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<double> recv_deposit(CancellationToken cancellationToken = default)
      {
        
        var tmp5 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp5.Type == TMessageType.Exception)
        {
          var tmp6 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp6;
        }

        var tmp7 = new InternalStructs.deposit_result();
        await tmp7.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp7.__isset.success)
        {
          return tmp7.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deposit failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<double> withdraw(string customer_id, double price, CancellationToken cancellationToken = default)
      {
        await send_withdraw(customer_id, price, cancellationToken);
        return await recv_withdraw(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_withdraw(string customer_id, double price, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("withdraw", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp8 = new InternalStructs.withdraw_args() {
          Customer_id = customer_id,
          Price = price,
        };
        
        await tmp8.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<double> recv_withdraw(CancellationToken cancellationToken = default)
      {
        
        var tmp9 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp9.Type == TMessageType.Exception)
        {
          var tmp10 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp10;
        }

        var tmp11 = new InternalStructs.withdraw_result();
        await tmp11.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp11.__isset.success)
        {
          return tmp11.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "withdraw failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["balance"] = balance_ProcessAsync;
        processMap_["deposit"] = deposit_ProcessAsync;
        processMap_["withdraw"] = withdraw_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out ProcessFunction fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task balance_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp12 = new InternalStructs.balance_args();
        await tmp12.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp13 = new InternalStructs.balance_result();
        try
        {
          tmp13.Success = await _iAsync.balance(tmp12.Customer_id, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("balance", TMessageType.Reply, seqid), cancellationToken); 
          await tmp13.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp14)
        {
          var tmp15 = $"Error occurred in {GetType().FullName}: {tmp14.Message}";
          if(_logger != null)
            _logger.LogError(tmp14, tmp15);
          else
            Console.Error.WriteLine(tmp15);
          var tmp16 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("balance", TMessageType.Exception, seqid), cancellationToken);
          await tmp16.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task deposit_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp17 = new InternalStructs.deposit_args();
        await tmp17.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp18 = new InternalStructs.deposit_result();
        try
        {
          tmp18.Success = await _iAsync.deposit(tmp17.Customer_id, tmp17.Price, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("deposit", TMessageType.Reply, seqid), cancellationToken); 
          await tmp18.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp19)
        {
          var tmp20 = $"Error occurred in {GetType().FullName}: {tmp19.Message}";
          if(_logger != null)
            _logger.LogError(tmp19, tmp20);
          else
            Console.Error.WriteLine(tmp20);
          var tmp21 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("deposit", TMessageType.Exception, seqid), cancellationToken);
          await tmp21.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task withdraw_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp22 = new InternalStructs.withdraw_args();
        await tmp22.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp23 = new InternalStructs.withdraw_result();
        try
        {
          tmp23.Success = await _iAsync.withdraw(tmp22.Customer_id, tmp22.Price, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("withdraw", TMessageType.Reply, seqid), cancellationToken); 
          await tmp23.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp24)
        {
          var tmp25 = $"Error occurred in {GetType().FullName}: {tmp24.Message}";
          if(_logger != null)
            _logger.LogError(tmp24, tmp25);
          else
            Console.Error.WriteLine(tmp25);
          var tmp26 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("withdraw", TMessageType.Exception, seqid), cancellationToken);
          await tmp26.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class balance_args : TBase
      {
        private string _customer_id;

        public string Customer_id
        {
          get
          {
            return _customer_id;
          }
          set
          {
            __isset.customer_id = true;
            this._customer_id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool customer_id;
        }

        public balance_args()
        {
        }

        public balance_args DeepCopy()
        {
          var tmp27 = new balance_args();
          if((Customer_id != null) && __isset.customer_id)
          {
            tmp27.Customer_id = this.Customer_id;
          }
          tmp27.__isset.customer_id = this.__isset.customer_id;
          return tmp27;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Customer_id = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp28 = new TStruct("balance_args");
            await oprot.WriteStructBeginAsync(tmp28, cancellationToken);
            var tmp29 = new TField();
            if((Customer_id != null) && __isset.customer_id)
            {
              tmp29.Name = "customer_id";
              tmp29.Type = TType.String;
              tmp29.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp29, cancellationToken);
              await oprot.WriteStringAsync(Customer_id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is balance_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.customer_id == other.__isset.customer_id) && ((!__isset.customer_id) || (System.Object.Equals(Customer_id, other.Customer_id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Customer_id != null) && __isset.customer_id)
            {
              hashcode = (hashcode * 397) + Customer_id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp30 = new StringBuilder("balance_args(");
          int tmp31 = 0;
          if((Customer_id != null) && __isset.customer_id)
          {
            if(0 < tmp31++) { tmp30.Append(", "); }
            tmp30.Append("Customer_id: ");
            Customer_id.ToString(tmp30);
          }
          tmp30.Append(')');
          return tmp30.ToString();
        }
      }


      public partial class balance_result : TBase
      {
        private double _success;

        public double Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public balance_result()
        {
        }

        public balance_result DeepCopy()
        {
          var tmp32 = new balance_result();
          if(__isset.success)
          {
            tmp32.Success = this.Success;
          }
          tmp32.__isset.success = this.__isset.success;
          return tmp32;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Double)
                  {
                    Success = await iprot.ReadDoubleAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp33 = new TStruct("balance_result");
            await oprot.WriteStructBeginAsync(tmp33, cancellationToken);
            var tmp34 = new TField();

            if(this.__isset.success)
            {
              tmp34.Name = "Success";
              tmp34.Type = TType.Double;
              tmp34.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp34, cancellationToken);
              await oprot.WriteDoubleAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is balance_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp35 = new StringBuilder("balance_result(");
          int tmp36 = 0;
          if(__isset.success)
          {
            if(0 < tmp36++) { tmp35.Append(", "); }
            tmp35.Append("Success: ");
            Success.ToString(tmp35);
          }
          tmp35.Append(')');
          return tmp35.ToString();
        }
      }


      public partial class deposit_args : TBase
      {
        private string _customer_id;
        private double _price;

        public string Customer_id
        {
          get
          {
            return _customer_id;
          }
          set
          {
            __isset.customer_id = true;
            this._customer_id = value;
          }
        }

        public double Price
        {
          get
          {
            return _price;
          }
          set
          {
            __isset.price = true;
            this._price = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool customer_id;
          public bool price;
        }

        public deposit_args()
        {
        }

        public deposit_args DeepCopy()
        {
          var tmp37 = new deposit_args();
          if((Customer_id != null) && __isset.customer_id)
          {
            tmp37.Customer_id = this.Customer_id;
          }
          tmp37.__isset.customer_id = this.__isset.customer_id;
          if(__isset.price)
          {
            tmp37.Price = this.Price;
          }
          tmp37.__isset.price = this.__isset.price;
          return tmp37;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Customer_id = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Double)
                  {
                    Price = await iprot.ReadDoubleAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp38 = new TStruct("deposit_args");
            await oprot.WriteStructBeginAsync(tmp38, cancellationToken);
            var tmp39 = new TField();
            if((Customer_id != null) && __isset.customer_id)
            {
              tmp39.Name = "customer_id";
              tmp39.Type = TType.String;
              tmp39.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp39, cancellationToken);
              await oprot.WriteStringAsync(Customer_id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.price)
            {
              tmp39.Name = "price";
              tmp39.Type = TType.Double;
              tmp39.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp39, cancellationToken);
              await oprot.WriteDoubleAsync(Price, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deposit_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.customer_id == other.__isset.customer_id) && ((!__isset.customer_id) || (System.Object.Equals(Customer_id, other.Customer_id))))
            && ((__isset.price == other.__isset.price) && ((!__isset.price) || (System.Object.Equals(Price, other.Price))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Customer_id != null) && __isset.customer_id)
            {
              hashcode = (hashcode * 397) + Customer_id.GetHashCode();
            }
            if(__isset.price)
            {
              hashcode = (hashcode * 397) + Price.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp40 = new StringBuilder("deposit_args(");
          int tmp41 = 0;
          if((Customer_id != null) && __isset.customer_id)
          {
            if(0 < tmp41++) { tmp40.Append(", "); }
            tmp40.Append("Customer_id: ");
            Customer_id.ToString(tmp40);
          }
          if(__isset.price)
          {
            if(0 < tmp41++) { tmp40.Append(", "); }
            tmp40.Append("Price: ");
            Price.ToString(tmp40);
          }
          tmp40.Append(')');
          return tmp40.ToString();
        }
      }


      public partial class deposit_result : TBase
      {
        private double _success;

        public double Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public deposit_result()
        {
        }

        public deposit_result DeepCopy()
        {
          var tmp42 = new deposit_result();
          if(__isset.success)
          {
            tmp42.Success = this.Success;
          }
          tmp42.__isset.success = this.__isset.success;
          return tmp42;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Double)
                  {
                    Success = await iprot.ReadDoubleAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp43 = new TStruct("deposit_result");
            await oprot.WriteStructBeginAsync(tmp43, cancellationToken);
            var tmp44 = new TField();

            if(this.__isset.success)
            {
              tmp44.Name = "Success";
              tmp44.Type = TType.Double;
              tmp44.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp44, cancellationToken);
              await oprot.WriteDoubleAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deposit_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp45 = new StringBuilder("deposit_result(");
          int tmp46 = 0;
          if(__isset.success)
          {
            if(0 < tmp46++) { tmp45.Append(", "); }
            tmp45.Append("Success: ");
            Success.ToString(tmp45);
          }
          tmp45.Append(')');
          return tmp45.ToString();
        }
      }


      public partial class withdraw_args : TBase
      {
        private string _customer_id;
        private double _price;

        public string Customer_id
        {
          get
          {
            return _customer_id;
          }
          set
          {
            __isset.customer_id = true;
            this._customer_id = value;
          }
        }

        public double Price
        {
          get
          {
            return _price;
          }
          set
          {
            __isset.price = true;
            this._price = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool customer_id;
          public bool price;
        }

        public withdraw_args()
        {
        }

        public withdraw_args DeepCopy()
        {
          var tmp47 = new withdraw_args();
          if((Customer_id != null) && __isset.customer_id)
          {
            tmp47.Customer_id = this.Customer_id;
          }
          tmp47.__isset.customer_id = this.__isset.customer_id;
          if(__isset.price)
          {
            tmp47.Price = this.Price;
          }
          tmp47.__isset.price = this.__isset.price;
          return tmp47;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Customer_id = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Double)
                  {
                    Price = await iprot.ReadDoubleAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp48 = new TStruct("withdraw_args");
            await oprot.WriteStructBeginAsync(tmp48, cancellationToken);
            var tmp49 = new TField();
            if((Customer_id != null) && __isset.customer_id)
            {
              tmp49.Name = "customer_id";
              tmp49.Type = TType.String;
              tmp49.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp49, cancellationToken);
              await oprot.WriteStringAsync(Customer_id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.price)
            {
              tmp49.Name = "price";
              tmp49.Type = TType.Double;
              tmp49.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp49, cancellationToken);
              await oprot.WriteDoubleAsync(Price, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is withdraw_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.customer_id == other.__isset.customer_id) && ((!__isset.customer_id) || (System.Object.Equals(Customer_id, other.Customer_id))))
            && ((__isset.price == other.__isset.price) && ((!__isset.price) || (System.Object.Equals(Price, other.Price))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Customer_id != null) && __isset.customer_id)
            {
              hashcode = (hashcode * 397) + Customer_id.GetHashCode();
            }
            if(__isset.price)
            {
              hashcode = (hashcode * 397) + Price.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp50 = new StringBuilder("withdraw_args(");
          int tmp51 = 0;
          if((Customer_id != null) && __isset.customer_id)
          {
            if(0 < tmp51++) { tmp50.Append(", "); }
            tmp50.Append("Customer_id: ");
            Customer_id.ToString(tmp50);
          }
          if(__isset.price)
          {
            if(0 < tmp51++) { tmp50.Append(", "); }
            tmp50.Append("Price: ");
            Price.ToString(tmp50);
          }
          tmp50.Append(')');
          return tmp50.ToString();
        }
      }


      public partial class withdraw_result : TBase
      {
        private double _success;

        public double Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public withdraw_result()
        {
        }

        public withdraw_result DeepCopy()
        {
          var tmp52 = new withdraw_result();
          if(__isset.success)
          {
            tmp52.Success = this.Success;
          }
          tmp52.__isset.success = this.__isset.success;
          return tmp52;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Double)
                  {
                    Success = await iprot.ReadDoubleAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp53 = new TStruct("withdraw_result");
            await oprot.WriteStructBeginAsync(tmp53, cancellationToken);
            var tmp54 = new TField();

            if(this.__isset.success)
            {
              tmp54.Name = "Success";
              tmp54.Type = TType.Double;
              tmp54.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp54, cancellationToken);
              await oprot.WriteDoubleAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is withdraw_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp55 = new StringBuilder("withdraw_result(");
          int tmp56 = 0;
          if(__isset.success)
          {
            if(0 < tmp56++) { tmp55.Append(", "); }
            tmp55.Append("Success: ");
            Success.ToString(tmp55);
          }
          tmp55.Append(')');
          return tmp55.ToString();
        }
      }

    }

  }
}
