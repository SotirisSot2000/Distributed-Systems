/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace ATMClient
{
  public partial class ATMService {
    public interface Iface {
      double balance(string customer_id);
      #if SILVERLIGHT
      IAsyncResult Begin_balance(AsyncCallback callback, object state, string customer_id);
      double End_balance(IAsyncResult asyncResult);
      #endif
      double deposit(string customer_id, double price);
      #if SILVERLIGHT
      IAsyncResult Begin_deposit(AsyncCallback callback, object state, string customer_id, double price);
      double End_deposit(IAsyncResult asyncResult);
      #endif
      double withdraw(string customer_id, double price);
      #if SILVERLIGHT
      IAsyncResult Begin_withdraw(AsyncCallback callback, object state, string customer_id, double price);
      double End_withdraw(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_balance(AsyncCallback callback, object state, string customer_id)
      {
        return send_balance(callback, state, customer_id);
      }

      public double End_balance(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_balance();
      }

      #endif

      public double balance(string customer_id)
      {
        #if !SILVERLIGHT
        send_balance(customer_id);
        return recv_balance();

        #else
        var asyncResult = Begin_balance(null, null, customer_id);
        return End_balance(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_balance(AsyncCallback callback, object state, string customer_id)
      #else
      public void send_balance(string customer_id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("balance", TMessageType.Call, seqid_));
        balance_args args = new balance_args();
        args.Customer_id = customer_id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public double recv_balance()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        balance_result result = new balance_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "balance failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_deposit(AsyncCallback callback, object state, string customer_id, double price)
      {
        return send_deposit(callback, state, customer_id, price);
      }

      public double End_deposit(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_deposit();
      }

      #endif

      public double deposit(string customer_id, double price)
      {
        #if !SILVERLIGHT
        send_deposit(customer_id, price);
        return recv_deposit();

        #else
        var asyncResult = Begin_deposit(null, null, customer_id, price);
        return End_deposit(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_deposit(AsyncCallback callback, object state, string customer_id, double price)
      #else
      public void send_deposit(string customer_id, double price)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("deposit", TMessageType.Call, seqid_));
        deposit_args args = new deposit_args();
        args.Customer_id = customer_id;
        args.Price = price;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public double recv_deposit()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deposit_result result = new deposit_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deposit failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_withdraw(AsyncCallback callback, object state, string customer_id, double price)
      {
        return send_withdraw(callback, state, customer_id, price);
      }

      public double End_withdraw(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_withdraw();
      }

      #endif

      public double withdraw(string customer_id, double price)
      {
        #if !SILVERLIGHT
        send_withdraw(customer_id, price);
        return recv_withdraw();

        #else
        var asyncResult = Begin_withdraw(null, null, customer_id, price);
        return End_withdraw(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_withdraw(AsyncCallback callback, object state, string customer_id, double price)
      #else
      public void send_withdraw(string customer_id, double price)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("withdraw", TMessageType.Call, seqid_));
        withdraw_args args = new withdraw_args();
        args.Customer_id = customer_id;
        args.Price = price;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public double recv_withdraw()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        withdraw_result result = new withdraw_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "withdraw failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["balance"] = balance_Process;
        processMap_["deposit"] = deposit_Process;
        processMap_["withdraw"] = withdraw_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void balance_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        balance_args args = new balance_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        balance_result result = new balance_result();
        result.Success = iface_.balance(args.Customer_id);
        oprot.WriteMessageBegin(new TMessage("balance", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deposit_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deposit_args args = new deposit_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deposit_result result = new deposit_result();
        result.Success = iface_.deposit(args.Customer_id, args.Price);
        oprot.WriteMessageBegin(new TMessage("deposit", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void withdraw_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        withdraw_args args = new withdraw_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        withdraw_result result = new withdraw_result();
        result.Success = iface_.withdraw(args.Customer_id, args.Price);
        oprot.WriteMessageBegin(new TMessage("withdraw", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class balance_args : TBase
    {
      private string _customer_id;

      public string Customer_id
      {
        get
        {
          return _customer_id;
        }
        set
        {
          __isset.customer_id = true;
          this._customer_id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool customer_id;
      }

      public balance_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Customer_id = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("balance_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Customer_id != null && __isset.customer_id) {
            field.Name = "customer_id";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Customer_id);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("balance_args(");
        bool __first = true;
        if (Customer_id != null && __isset.customer_id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Customer_id: ");
          __sb.Append(Customer_id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class balance_result : TBase
    {
      private double _success;

      public double Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public balance_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Double) {
                  Success = iprot.ReadDouble();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("balance_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Double;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteDouble(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("balance_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deposit_args : TBase
    {
      private string _customer_id;
      private double _price;

      public string Customer_id
      {
        get
        {
          return _customer_id;
        }
        set
        {
          __isset.customer_id = true;
          this._customer_id = value;
        }
      }

      public double Price
      {
        get
        {
          return _price;
        }
        set
        {
          __isset.price = true;
          this._price = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool customer_id;
        public bool price;
      }

      public deposit_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Customer_id = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Double) {
                  Price = iprot.ReadDouble();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("deposit_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Customer_id != null && __isset.customer_id) {
            field.Name = "customer_id";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Customer_id);
            oprot.WriteFieldEnd();
          }
          if (__isset.price) {
            field.Name = "price";
            field.Type = TType.Double;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteDouble(Price);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deposit_args(");
        bool __first = true;
        if (Customer_id != null && __isset.customer_id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Customer_id: ");
          __sb.Append(Customer_id);
        }
        if (__isset.price) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Price: ");
          __sb.Append(Price);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deposit_result : TBase
    {
      private double _success;

      public double Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public deposit_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Double) {
                  Success = iprot.ReadDouble();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("deposit_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Double;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteDouble(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deposit_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class withdraw_args : TBase
    {
      private string _customer_id;
      private double _price;

      public string Customer_id
      {
        get
        {
          return _customer_id;
        }
        set
        {
          __isset.customer_id = true;
          this._customer_id = value;
        }
      }

      public double Price
      {
        get
        {
          return _price;
        }
        set
        {
          __isset.price = true;
          this._price = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool customer_id;
        public bool price;
      }

      public withdraw_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Customer_id = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Double) {
                  Price = iprot.ReadDouble();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("withdraw_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Customer_id != null && __isset.customer_id) {
            field.Name = "customer_id";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Customer_id);
            oprot.WriteFieldEnd();
          }
          if (__isset.price) {
            field.Name = "price";
            field.Type = TType.Double;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteDouble(Price);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("withdraw_args(");
        bool __first = true;
        if (Customer_id != null && __isset.customer_id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Customer_id: ");
          __sb.Append(Customer_id);
        }
        if (__isset.price) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Price: ");
          __sb.Append(Price);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class withdraw_result : TBase
    {
      private double _success;

      public double Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public withdraw_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Double) {
                  Success = iprot.ReadDouble();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("withdraw_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Double;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteDouble(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("withdraw_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
